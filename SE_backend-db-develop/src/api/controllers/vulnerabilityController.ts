import { BaseEntity } from "../services/services";
import { vulnerabilityServices } from "../services/vulnerabilityServices";
import { Controllers } from "./controllers";
import { vulnerabilityType } from "../schemas/requestBodySchema";

type TVulnerability = BaseEntity;

class VulnerabilityControllers extends Controllers<TVulnerability, vulnerabilityType, vulnerabilityServices> {
  private constructor() {
    super(vulnerabilityServices.instance());
  }

  static instance(): VulnerabilityControllers {
    return Controllers.getInstance.call(VulnerabilityControllers);
  }
}

const controller = VulnerabilityControllers.instance();

export const getAllVulnerabilities = controller.getAll.bind(controller);
export const getVulnerabilityById = controller.getById.bind(controller);
export const createVulnerability = controller.create.bind(controller);
export const updateVulnerability = controller.update.bind(controller);
export const deleteVulnerability = controller.delete.bind(controller);

